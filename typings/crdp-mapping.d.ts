/**
 * @license Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

// Generated by `yarn update:crdp-typings`

declare global {
  module LH {
    export interface CrdpEvents {
      'Console.messageAdded': Crdp.Console.MessageAddedEvent;
      'Debugger.breakpointResolved': Crdp.Debugger.BreakpointResolvedEvent;
      'Debugger.paused': Crdp.Debugger.PausedEvent;
      'Debugger.resumed': void;
      'Debugger.scriptFailedToParse': Crdp.Debugger.ScriptFailedToParseEvent;
      'Debugger.scriptParsed': Crdp.Debugger.ScriptParsedEvent;
      'HeapProfiler.addHeapSnapshotChunk': Crdp.HeapProfiler.AddHeapSnapshotChunkEvent;
      'HeapProfiler.heapStatsUpdate': Crdp.HeapProfiler.HeapStatsUpdateEvent;
      'HeapProfiler.lastSeenObjectId': Crdp.HeapProfiler.LastSeenObjectIdEvent;
      'HeapProfiler.reportHeapSnapshotProgress': Crdp.HeapProfiler.ReportHeapSnapshotProgressEvent;
      'HeapProfiler.resetProfiles': void;
      'Profiler.consoleProfileFinished': Crdp.Profiler.ConsoleProfileFinishedEvent;
      'Profiler.consoleProfileStarted': Crdp.Profiler.ConsoleProfileStartedEvent;
      'Runtime.consoleAPICalled': Crdp.Runtime.ConsoleAPICalledEvent;
      'Runtime.exceptionRevoked': Crdp.Runtime.ExceptionRevokedEvent;
      'Runtime.exceptionThrown': Crdp.Runtime.ExceptionThrownEvent;
      'Runtime.executionContextCreated': Crdp.Runtime.ExecutionContextCreatedEvent;
      'Runtime.executionContextDestroyed': Crdp.Runtime.ExecutionContextDestroyedEvent;
      'Runtime.executionContextsCleared': void;
      'Runtime.inspectRequested': Crdp.Runtime.InspectRequestedEvent;
      'Animation.animationCanceled': Crdp.Animation.AnimationCanceledEvent;
      'Animation.animationCreated': Crdp.Animation.AnimationCreatedEvent;
      'Animation.animationStarted': Crdp.Animation.AnimationStartedEvent;
      'ApplicationCache.applicationCacheStatusUpdated': Crdp.ApplicationCache.ApplicationCacheStatusUpdatedEvent;
      'ApplicationCache.networkStateUpdated': Crdp.ApplicationCache.NetworkStateUpdatedEvent;
      'CSS.fontsUpdated': void;
      'CSS.mediaQueryResultChanged': void;
      'CSS.styleSheetAdded': Crdp.CSS.StyleSheetAddedEvent;
      'CSS.styleSheetChanged': Crdp.CSS.StyleSheetChangedEvent;
      'CSS.styleSheetRemoved': Crdp.CSS.StyleSheetRemovedEvent;
      'DOM.attributeModified': Crdp.DOM.AttributeModifiedEvent;
      'DOM.attributeRemoved': Crdp.DOM.AttributeRemovedEvent;
      'DOM.characterDataModified': Crdp.DOM.CharacterDataModifiedEvent;
      'DOM.childNodeCountUpdated': Crdp.DOM.ChildNodeCountUpdatedEvent;
      'DOM.childNodeInserted': Crdp.DOM.ChildNodeInsertedEvent;
      'DOM.childNodeRemoved': Crdp.DOM.ChildNodeRemovedEvent;
      'DOM.distributedNodesUpdated': Crdp.DOM.DistributedNodesUpdatedEvent;
      'DOM.documentUpdated': void;
      'DOM.inlineStyleInvalidated': Crdp.DOM.InlineStyleInvalidatedEvent;
      'DOM.pseudoElementAdded': Crdp.DOM.PseudoElementAddedEvent;
      'DOM.pseudoElementRemoved': Crdp.DOM.PseudoElementRemovedEvent;
      'DOM.setChildNodes': Crdp.DOM.SetChildNodesEvent;
      'DOM.shadowRootPopped': Crdp.DOM.ShadowRootPoppedEvent;
      'DOM.shadowRootPushed': Crdp.DOM.ShadowRootPushedEvent;
      'DOMStorage.domStorageItemAdded': Crdp.DOMStorage.DomStorageItemAddedEvent;
      'DOMStorage.domStorageItemRemoved': Crdp.DOMStorage.DomStorageItemRemovedEvent;
      'DOMStorage.domStorageItemUpdated': Crdp.DOMStorage.DomStorageItemUpdatedEvent;
      'DOMStorage.domStorageItemsCleared': Crdp.DOMStorage.DomStorageItemsClearedEvent;
      'Database.addDatabase': Crdp.Database.AddDatabaseEvent;
      'Emulation.virtualTimeAdvanced': Crdp.Emulation.VirtualTimeAdvancedEvent;
      'Emulation.virtualTimeBudgetExpired': void;
      'Emulation.virtualTimePaused': Crdp.Emulation.VirtualTimePausedEvent;
      'HeadlessExperimental.mainFrameReadyForScreenshots': void;
      'HeadlessExperimental.needsBeginFramesChanged': Crdp.HeadlessExperimental.NeedsBeginFramesChangedEvent;
      'Inspector.detached': Crdp.Inspector.DetachedEvent;
      'Inspector.targetCrashed': void;
      'LayerTree.layerPainted': Crdp.LayerTree.LayerPaintedEvent;
      'LayerTree.layerTreeDidChange': Crdp.LayerTree.LayerTreeDidChangeEvent;
      'Log.entryAdded': Crdp.Log.EntryAddedEvent;
      'Network.dataReceived': Crdp.Network.DataReceivedEvent;
      'Network.eventSourceMessageReceived': Crdp.Network.EventSourceMessageReceivedEvent;
      'Network.loadingFailed': Crdp.Network.LoadingFailedEvent;
      'Network.loadingFinished': Crdp.Network.LoadingFinishedEvent;
      'Network.requestIntercepted': Crdp.Network.RequestInterceptedEvent;
      'Network.requestServedFromCache': Crdp.Network.RequestServedFromCacheEvent;
      'Network.requestWillBeSent': Crdp.Network.RequestWillBeSentEvent;
      'Network.resourceChangedPriority': Crdp.Network.ResourceChangedPriorityEvent;
      'Network.responseReceived': Crdp.Network.ResponseReceivedEvent;
      'Network.webSocketClosed': Crdp.Network.WebSocketClosedEvent;
      'Network.webSocketCreated': Crdp.Network.WebSocketCreatedEvent;
      'Network.webSocketFrameError': Crdp.Network.WebSocketFrameErrorEvent;
      'Network.webSocketFrameReceived': Crdp.Network.WebSocketFrameReceivedEvent;
      'Network.webSocketFrameSent': Crdp.Network.WebSocketFrameSentEvent;
      'Network.webSocketHandshakeResponseReceived': Crdp.Network.WebSocketHandshakeResponseReceivedEvent;
      'Network.webSocketWillSendHandshakeRequest': Crdp.Network.WebSocketWillSendHandshakeRequestEvent;
      'Overlay.inspectNodeRequested': Crdp.Overlay.InspectNodeRequestedEvent;
      'Overlay.nodeHighlightRequested': Crdp.Overlay.NodeHighlightRequestedEvent;
      'Overlay.screenshotRequested': Crdp.Overlay.ScreenshotRequestedEvent;
      'Page.domContentEventFired': Crdp.Page.DomContentEventFiredEvent;
      'Page.frameAttached': Crdp.Page.FrameAttachedEvent;
      'Page.frameClearedScheduledNavigation': Crdp.Page.FrameClearedScheduledNavigationEvent;
      'Page.frameDetached': Crdp.Page.FrameDetachedEvent;
      'Page.frameNavigated': Crdp.Page.FrameNavigatedEvent;
      'Page.frameResized': void;
      'Page.frameScheduledNavigation': Crdp.Page.FrameScheduledNavigationEvent;
      'Page.frameStartedLoading': Crdp.Page.FrameStartedLoadingEvent;
      'Page.frameStoppedLoading': Crdp.Page.FrameStoppedLoadingEvent;
      'Page.interstitialHidden': void;
      'Page.interstitialShown': void;
      'Page.javascriptDialogClosed': Crdp.Page.JavascriptDialogClosedEvent;
      'Page.javascriptDialogOpening': Crdp.Page.JavascriptDialogOpeningEvent;
      'Page.lifecycleEvent': Crdp.Page.LifecycleEventEvent;
      'Page.loadEventFired': Crdp.Page.LoadEventFiredEvent;
      'Page.screencastFrame': Crdp.Page.ScreencastFrameEvent;
      'Page.screencastVisibilityChanged': Crdp.Page.ScreencastVisibilityChangedEvent;
      'Page.windowOpen': Crdp.Page.WindowOpenEvent;
      'Performance.metrics': Crdp.Performance.MetricsEvent;
      'Security.certificateError': Crdp.Security.CertificateErrorEvent;
      'Security.securityStateChanged': Crdp.Security.SecurityStateChangedEvent;
      'ServiceWorker.workerErrorReported': Crdp.ServiceWorker.WorkerErrorReportedEvent;
      'ServiceWorker.workerRegistrationUpdated': Crdp.ServiceWorker.WorkerRegistrationUpdatedEvent;
      'ServiceWorker.workerVersionUpdated': Crdp.ServiceWorker.WorkerVersionUpdatedEvent;
      'Storage.cacheStorageContentUpdated': Crdp.Storage.CacheStorageContentUpdatedEvent;
      'Storage.cacheStorageListUpdated': Crdp.Storage.CacheStorageListUpdatedEvent;
      'Storage.indexedDBContentUpdated': Crdp.Storage.IndexedDBContentUpdatedEvent;
      'Storage.indexedDBListUpdated': Crdp.Storage.IndexedDBListUpdatedEvent;
      'Target.attachedToTarget': Crdp.Target.AttachedToTargetEvent;
      'Target.detachedFromTarget': Crdp.Target.DetachedFromTargetEvent;
      'Target.receivedMessageFromTarget': Crdp.Target.ReceivedMessageFromTargetEvent;
      'Target.targetCreated': Crdp.Target.TargetCreatedEvent;
      'Target.targetDestroyed': Crdp.Target.TargetDestroyedEvent;
      'Target.targetInfoChanged': Crdp.Target.TargetInfoChangedEvent;
      'Tethering.accepted': Crdp.Tethering.AcceptedEvent;
      'Tracing.bufferUsage': Crdp.Tracing.BufferUsageEvent;
      'Tracing.dataCollected': Crdp.Tracing.DataCollectedEvent;
      'Tracing.tracingComplete': Crdp.Tracing.TracingCompleteEvent;
    }

    export interface CrdpCommands {
      'Console.clearMessages': {
        paramsType: void,
        returnType: void
      };
      'Console.disable': {
        paramsType: void,
        returnType: void
      };
      'Console.enable': {
        paramsType: void,
        returnType: void
      };
      'Debugger.continueToLocation': {
        paramsType: Crdp.Debugger.ContinueToLocationRequest,
        returnType: void
      };
      'Debugger.disable': {
        paramsType: void,
        returnType: void
      };
      'Debugger.enable': {
        paramsType: void,
        returnType: Crdp.Debugger.EnableResponse
      };
      'Debugger.evaluateOnCallFrame': {
        paramsType: Crdp.Debugger.EvaluateOnCallFrameRequest,
        returnType: Crdp.Debugger.EvaluateOnCallFrameResponse
      };
      'Debugger.getPossibleBreakpoints': {
        paramsType: Crdp.Debugger.GetPossibleBreakpointsRequest,
        returnType: Crdp.Debugger.GetPossibleBreakpointsResponse
      };
      'Debugger.getScriptSource': {
        paramsType: Crdp.Debugger.GetScriptSourceRequest,
        returnType: Crdp.Debugger.GetScriptSourceResponse
      };
      'Debugger.getStackTrace': {
        paramsType: Crdp.Debugger.GetStackTraceRequest,
        returnType: Crdp.Debugger.GetStackTraceResponse
      };
      'Debugger.pause': {
        paramsType: void,
        returnType: void
      };
      'Debugger.pauseOnAsyncCall': {
        paramsType: Crdp.Debugger.PauseOnAsyncCallRequest,
        returnType: void
      };
      'Debugger.removeBreakpoint': {
        paramsType: Crdp.Debugger.RemoveBreakpointRequest,
        returnType: void
      };
      'Debugger.restartFrame': {
        paramsType: Crdp.Debugger.RestartFrameRequest,
        returnType: Crdp.Debugger.RestartFrameResponse
      };
      'Debugger.resume': {
        paramsType: void,
        returnType: void
      };
      'Debugger.scheduleStepIntoAsync': {
        paramsType: void,
        returnType: void
      };
      'Debugger.searchInContent': {
        paramsType: Crdp.Debugger.SearchInContentRequest,
        returnType: Crdp.Debugger.SearchInContentResponse
      };
      'Debugger.setAsyncCallStackDepth': {
        paramsType: Crdp.Debugger.SetAsyncCallStackDepthRequest,
        returnType: void
      };
      'Debugger.setBlackboxPatterns': {
        paramsType: Crdp.Debugger.SetBlackboxPatternsRequest,
        returnType: void
      };
      'Debugger.setBlackboxedRanges': {
        paramsType: Crdp.Debugger.SetBlackboxedRangesRequest,
        returnType: void
      };
      'Debugger.setBreakpoint': {
        paramsType: Crdp.Debugger.SetBreakpointRequest,
        returnType: Crdp.Debugger.SetBreakpointResponse
      };
      'Debugger.setBreakpointByUrl': {
        paramsType: Crdp.Debugger.SetBreakpointByUrlRequest,
        returnType: Crdp.Debugger.SetBreakpointByUrlResponse
      };
      'Debugger.setBreakpointsActive': {
        paramsType: Crdp.Debugger.SetBreakpointsActiveRequest,
        returnType: void
      };
      'Debugger.setPauseOnExceptions': {
        paramsType: Crdp.Debugger.SetPauseOnExceptionsRequest,
        returnType: void
      };
      'Debugger.setReturnValue': {
        paramsType: Crdp.Debugger.SetReturnValueRequest,
        returnType: void
      };
      'Debugger.setScriptSource': {
        paramsType: Crdp.Debugger.SetScriptSourceRequest,
        returnType: Crdp.Debugger.SetScriptSourceResponse
      };
      'Debugger.setSkipAllPauses': {
        paramsType: Crdp.Debugger.SetSkipAllPausesRequest,
        returnType: void
      };
      'Debugger.setVariableValue': {
        paramsType: Crdp.Debugger.SetVariableValueRequest,
        returnType: void
      };
      'Debugger.stepInto': {
        paramsType: void | Crdp.Debugger.StepIntoRequest,
        returnType: void
      };
      'Debugger.stepOut': {
        paramsType: void,
        returnType: void
      };
      'Debugger.stepOver': {
        paramsType: void,
        returnType: void
      };
      'HeapProfiler.addInspectedHeapObject': {
        paramsType: Crdp.HeapProfiler.AddInspectedHeapObjectRequest,
        returnType: void
      };
      'HeapProfiler.collectGarbage': {
        paramsType: void,
        returnType: void
      };
      'HeapProfiler.disable': {
        paramsType: void,
        returnType: void
      };
      'HeapProfiler.enable': {
        paramsType: void,
        returnType: void
      };
      'HeapProfiler.getHeapObjectId': {
        paramsType: Crdp.HeapProfiler.GetHeapObjectIdRequest,
        returnType: Crdp.HeapProfiler.GetHeapObjectIdResponse
      };
      'HeapProfiler.getObjectByHeapObjectId': {
        paramsType: Crdp.HeapProfiler.GetObjectByHeapObjectIdRequest,
        returnType: Crdp.HeapProfiler.GetObjectByHeapObjectIdResponse
      };
      'HeapProfiler.getSamplingProfile': {
        paramsType: void,
        returnType: Crdp.HeapProfiler.GetSamplingProfileResponse
      };
      'HeapProfiler.startSampling': {
        paramsType: void | Crdp.HeapProfiler.StartSamplingRequest,
        returnType: void
      };
      'HeapProfiler.startTrackingHeapObjects': {
        paramsType: void | Crdp.HeapProfiler.StartTrackingHeapObjectsRequest,
        returnType: void
      };
      'HeapProfiler.stopSampling': {
        paramsType: void,
        returnType: Crdp.HeapProfiler.StopSamplingResponse
      };
      'HeapProfiler.stopTrackingHeapObjects': {
        paramsType: void | Crdp.HeapProfiler.StopTrackingHeapObjectsRequest,
        returnType: void
      };
      'HeapProfiler.takeHeapSnapshot': {
        paramsType: void | Crdp.HeapProfiler.TakeHeapSnapshotRequest,
        returnType: void
      };
      'Profiler.disable': {
        paramsType: void,
        returnType: void
      };
      'Profiler.enable': {
        paramsType: void,
        returnType: void
      };
      'Profiler.getBestEffortCoverage': {
        paramsType: void,
        returnType: Crdp.Profiler.GetBestEffortCoverageResponse
      };
      'Profiler.setSamplingInterval': {
        paramsType: Crdp.Profiler.SetSamplingIntervalRequest,
        returnType: void
      };
      'Profiler.start': {
        paramsType: void,
        returnType: void
      };
      'Profiler.startPreciseCoverage': {
        paramsType: void | Crdp.Profiler.StartPreciseCoverageRequest,
        returnType: void
      };
      'Profiler.startTypeProfile': {
        paramsType: void,
        returnType: void
      };
      'Profiler.stop': {
        paramsType: void,
        returnType: Crdp.Profiler.StopResponse
      };
      'Profiler.stopPreciseCoverage': {
        paramsType: void,
        returnType: void
      };
      'Profiler.stopTypeProfile': {
        paramsType: void,
        returnType: void
      };
      'Profiler.takePreciseCoverage': {
        paramsType: void,
        returnType: Crdp.Profiler.TakePreciseCoverageResponse
      };
      'Profiler.takeTypeProfile': {
        paramsType: void,
        returnType: Crdp.Profiler.TakeTypeProfileResponse
      };
      'Runtime.awaitPromise': {
        paramsType: Crdp.Runtime.AwaitPromiseRequest,
        returnType: Crdp.Runtime.AwaitPromiseResponse
      };
      'Runtime.callFunctionOn': {
        paramsType: Crdp.Runtime.CallFunctionOnRequest,
        returnType: Crdp.Runtime.CallFunctionOnResponse
      };
      'Runtime.compileScript': {
        paramsType: Crdp.Runtime.CompileScriptRequest,
        returnType: Crdp.Runtime.CompileScriptResponse
      };
      'Runtime.disable': {
        paramsType: void,
        returnType: void
      };
      'Runtime.discardConsoleEntries': {
        paramsType: void,
        returnType: void
      };
      'Runtime.enable': {
        paramsType: void,
        returnType: void
      };
      'Runtime.evaluate': {
        paramsType: Crdp.Runtime.EvaluateRequest,
        returnType: Crdp.Runtime.EvaluateResponse
      };
      'Runtime.getProperties': {
        paramsType: Crdp.Runtime.GetPropertiesRequest,
        returnType: Crdp.Runtime.GetPropertiesResponse
      };
      'Runtime.globalLexicalScopeNames': {
        paramsType: void | Crdp.Runtime.GlobalLexicalScopeNamesRequest,
        returnType: Crdp.Runtime.GlobalLexicalScopeNamesResponse
      };
      'Runtime.queryObjects': {
        paramsType: Crdp.Runtime.QueryObjectsRequest,
        returnType: Crdp.Runtime.QueryObjectsResponse
      };
      'Runtime.releaseObject': {
        paramsType: Crdp.Runtime.ReleaseObjectRequest,
        returnType: void
      };
      'Runtime.releaseObjectGroup': {
        paramsType: Crdp.Runtime.ReleaseObjectGroupRequest,
        returnType: void
      };
      'Runtime.runIfWaitingForDebugger': {
        paramsType: void,
        returnType: void
      };
      'Runtime.runScript': {
        paramsType: Crdp.Runtime.RunScriptRequest,
        returnType: Crdp.Runtime.RunScriptResponse
      };
      'Runtime.setCustomObjectFormatterEnabled': {
        paramsType: Crdp.Runtime.SetCustomObjectFormatterEnabledRequest,
        returnType: void
      };
      'Schema.getDomains': {
        paramsType: void,
        returnType: Crdp.Schema.GetDomainsResponse
      };
      'Accessibility.getPartialAXTree': {
        paramsType: Crdp.Accessibility.GetPartialAXTreeRequest,
        returnType: Crdp.Accessibility.GetPartialAXTreeResponse
      };
      'Animation.disable': {
        paramsType: void,
        returnType: void
      };
      'Animation.enable': {
        paramsType: void,
        returnType: void
      };
      'Animation.getCurrentTime': {
        paramsType: Crdp.Animation.GetCurrentTimeRequest,
        returnType: Crdp.Animation.GetCurrentTimeResponse
      };
      'Animation.getPlaybackRate': {
        paramsType: void,
        returnType: Crdp.Animation.GetPlaybackRateResponse
      };
      'Animation.releaseAnimations': {
        paramsType: Crdp.Animation.ReleaseAnimationsRequest,
        returnType: void
      };
      'Animation.resolveAnimation': {
        paramsType: Crdp.Animation.ResolveAnimationRequest,
        returnType: Crdp.Animation.ResolveAnimationResponse
      };
      'Animation.seekAnimations': {
        paramsType: Crdp.Animation.SeekAnimationsRequest,
        returnType: void
      };
      'Animation.setPaused': {
        paramsType: Crdp.Animation.SetPausedRequest,
        returnType: void
      };
      'Animation.setPlaybackRate': {
        paramsType: Crdp.Animation.SetPlaybackRateRequest,
        returnType: void
      };
      'Animation.setTiming': {
        paramsType: Crdp.Animation.SetTimingRequest,
        returnType: void
      };
      'ApplicationCache.enable': {
        paramsType: void,
        returnType: void
      };
      'ApplicationCache.getApplicationCacheForFrame': {
        paramsType: Crdp.ApplicationCache.GetApplicationCacheForFrameRequest,
        returnType: Crdp.ApplicationCache.GetApplicationCacheForFrameResponse
      };
      'ApplicationCache.getFramesWithManifests': {
        paramsType: void,
        returnType: Crdp.ApplicationCache.GetFramesWithManifestsResponse
      };
      'ApplicationCache.getManifestForFrame': {
        paramsType: Crdp.ApplicationCache.GetManifestForFrameRequest,
        returnType: Crdp.ApplicationCache.GetManifestForFrameResponse
      };
      'Audits.getEncodedResponse': {
        paramsType: Crdp.Audits.GetEncodedResponseRequest,
        returnType: Crdp.Audits.GetEncodedResponseResponse
      };
      'Browser.close': {
        paramsType: void,
        returnType: void
      };
      'Browser.getVersion': {
        paramsType: void,
        returnType: Crdp.Browser.GetVersionResponse
      };
      'Browser.getHistograms': {
        paramsType: void | Crdp.Browser.GetHistogramsRequest,
        returnType: Crdp.Browser.GetHistogramsResponse
      };
      'Browser.getHistogram': {
        paramsType: Crdp.Browser.GetHistogramRequest,
        returnType: Crdp.Browser.GetHistogramResponse
      };
      'Browser.getWindowBounds': {
        paramsType: Crdp.Browser.GetWindowBoundsRequest,
        returnType: Crdp.Browser.GetWindowBoundsResponse
      };
      'Browser.getWindowForTarget': {
        paramsType: Crdp.Browser.GetWindowForTargetRequest,
        returnType: Crdp.Browser.GetWindowForTargetResponse
      };
      'Browser.setWindowBounds': {
        paramsType: Crdp.Browser.SetWindowBoundsRequest,
        returnType: void
      };
      'CSS.addRule': {
        paramsType: Crdp.CSS.AddRuleRequest,
        returnType: Crdp.CSS.AddRuleResponse
      };
      'CSS.collectClassNames': {
        paramsType: Crdp.CSS.CollectClassNamesRequest,
        returnType: Crdp.CSS.CollectClassNamesResponse
      };
      'CSS.createStyleSheet': {
        paramsType: Crdp.CSS.CreateStyleSheetRequest,
        returnType: Crdp.CSS.CreateStyleSheetResponse
      };
      'CSS.disable': {
        paramsType: void,
        returnType: void
      };
      'CSS.enable': {
        paramsType: void,
        returnType: void
      };
      'CSS.forcePseudoState': {
        paramsType: Crdp.CSS.ForcePseudoStateRequest,
        returnType: void
      };
      'CSS.getBackgroundColors': {
        paramsType: Crdp.CSS.GetBackgroundColorsRequest,
        returnType: Crdp.CSS.GetBackgroundColorsResponse
      };
      'CSS.getComputedStyleForNode': {
        paramsType: Crdp.CSS.GetComputedStyleForNodeRequest,
        returnType: Crdp.CSS.GetComputedStyleForNodeResponse
      };
      'CSS.getInlineStylesForNode': {
        paramsType: Crdp.CSS.GetInlineStylesForNodeRequest,
        returnType: Crdp.CSS.GetInlineStylesForNodeResponse
      };
      'CSS.getMatchedStylesForNode': {
        paramsType: Crdp.CSS.GetMatchedStylesForNodeRequest,
        returnType: Crdp.CSS.GetMatchedStylesForNodeResponse
      };
      'CSS.getMediaQueries': {
        paramsType: void,
        returnType: Crdp.CSS.GetMediaQueriesResponse
      };
      'CSS.getPlatformFontsForNode': {
        paramsType: Crdp.CSS.GetPlatformFontsForNodeRequest,
        returnType: Crdp.CSS.GetPlatformFontsForNodeResponse
      };
      'CSS.getStyleSheetText': {
        paramsType: Crdp.CSS.GetStyleSheetTextRequest,
        returnType: Crdp.CSS.GetStyleSheetTextResponse
      };
      'CSS.setEffectivePropertyValueForNode': {
        paramsType: Crdp.CSS.SetEffectivePropertyValueForNodeRequest,
        returnType: void
      };
      'CSS.setKeyframeKey': {
        paramsType: Crdp.CSS.SetKeyframeKeyRequest,
        returnType: Crdp.CSS.SetKeyframeKeyResponse
      };
      'CSS.setMediaText': {
        paramsType: Crdp.CSS.SetMediaTextRequest,
        returnType: Crdp.CSS.SetMediaTextResponse
      };
      'CSS.setRuleSelector': {
        paramsType: Crdp.CSS.SetRuleSelectorRequest,
        returnType: Crdp.CSS.SetRuleSelectorResponse
      };
      'CSS.setStyleSheetText': {
        paramsType: Crdp.CSS.SetStyleSheetTextRequest,
        returnType: Crdp.CSS.SetStyleSheetTextResponse
      };
      'CSS.setStyleTexts': {
        paramsType: Crdp.CSS.SetStyleTextsRequest,
        returnType: Crdp.CSS.SetStyleTextsResponse
      };
      'CSS.startRuleUsageTracking': {
        paramsType: void,
        returnType: void
      };
      'CSS.stopRuleUsageTracking': {
        paramsType: void,
        returnType: Crdp.CSS.StopRuleUsageTrackingResponse
      };
      'CSS.takeCoverageDelta': {
        paramsType: void,
        returnType: Crdp.CSS.TakeCoverageDeltaResponse
      };
      'CacheStorage.deleteCache': {
        paramsType: Crdp.CacheStorage.DeleteCacheRequest,
        returnType: void
      };
      'CacheStorage.deleteEntry': {
        paramsType: Crdp.CacheStorage.DeleteEntryRequest,
        returnType: void
      };
      'CacheStorage.requestCacheNames': {
        paramsType: Crdp.CacheStorage.RequestCacheNamesRequest,
        returnType: Crdp.CacheStorage.RequestCacheNamesResponse
      };
      'CacheStorage.requestCachedResponse': {
        paramsType: Crdp.CacheStorage.RequestCachedResponseRequest,
        returnType: Crdp.CacheStorage.RequestCachedResponseResponse
      };
      'CacheStorage.requestEntries': {
        paramsType: Crdp.CacheStorage.RequestEntriesRequest,
        returnType: Crdp.CacheStorage.RequestEntriesResponse
      };
      'DOM.collectClassNamesFromSubtree': {
        paramsType: Crdp.DOM.CollectClassNamesFromSubtreeRequest,
        returnType: Crdp.DOM.CollectClassNamesFromSubtreeResponse
      };
      'DOM.copyTo': {
        paramsType: Crdp.DOM.CopyToRequest,
        returnType: Crdp.DOM.CopyToResponse
      };
      'DOM.describeNode': {
        paramsType: void | Crdp.DOM.DescribeNodeRequest,
        returnType: Crdp.DOM.DescribeNodeResponse
      };
      'DOM.disable': {
        paramsType: void,
        returnType: void
      };
      'DOM.discardSearchResults': {
        paramsType: Crdp.DOM.DiscardSearchResultsRequest,
        returnType: void
      };
      'DOM.enable': {
        paramsType: void,
        returnType: void
      };
      'DOM.focus': {
        paramsType: void | Crdp.DOM.FocusRequest,
        returnType: void
      };
      'DOM.getAttributes': {
        paramsType: Crdp.DOM.GetAttributesRequest,
        returnType: Crdp.DOM.GetAttributesResponse
      };
      'DOM.getBoxModel': {
        paramsType: void | Crdp.DOM.GetBoxModelRequest,
        returnType: Crdp.DOM.GetBoxModelResponse
      };
      'DOM.getDocument': {
        paramsType: void | Crdp.DOM.GetDocumentRequest,
        returnType: Crdp.DOM.GetDocumentResponse
      };
      'DOM.getFlattenedDocument': {
        paramsType: void | Crdp.DOM.GetFlattenedDocumentRequest,
        returnType: Crdp.DOM.GetFlattenedDocumentResponse
      };
      'DOM.getNodeForLocation': {
        paramsType: Crdp.DOM.GetNodeForLocationRequest,
        returnType: Crdp.DOM.GetNodeForLocationResponse
      };
      'DOM.getOuterHTML': {
        paramsType: void | Crdp.DOM.GetOuterHTMLRequest,
        returnType: Crdp.DOM.GetOuterHTMLResponse
      };
      'DOM.getRelayoutBoundary': {
        paramsType: Crdp.DOM.GetRelayoutBoundaryRequest,
        returnType: Crdp.DOM.GetRelayoutBoundaryResponse
      };
      'DOM.getSearchResults': {
        paramsType: Crdp.DOM.GetSearchResultsRequest,
        returnType: Crdp.DOM.GetSearchResultsResponse
      };
      'DOM.hideHighlight': {
        paramsType: void,
        returnType: void
      };
      'DOM.highlightNode': {
        paramsType: void,
        returnType: void
      };
      'DOM.highlightRect': {
        paramsType: void,
        returnType: void
      };
      'DOM.markUndoableState': {
        paramsType: void,
        returnType: void
      };
      'DOM.moveTo': {
        paramsType: Crdp.DOM.MoveToRequest,
        returnType: Crdp.DOM.MoveToResponse
      };
      'DOM.performSearch': {
        paramsType: Crdp.DOM.PerformSearchRequest,
        returnType: Crdp.DOM.PerformSearchResponse
      };
      'DOM.pushNodeByPathToFrontend': {
        paramsType: Crdp.DOM.PushNodeByPathToFrontendRequest,
        returnType: Crdp.DOM.PushNodeByPathToFrontendResponse
      };
      'DOM.pushNodesByBackendIdsToFrontend': {
        paramsType: Crdp.DOM.PushNodesByBackendIdsToFrontendRequest,
        returnType: Crdp.DOM.PushNodesByBackendIdsToFrontendResponse
      };
      'DOM.querySelector': {
        paramsType: Crdp.DOM.QuerySelectorRequest,
        returnType: Crdp.DOM.QuerySelectorResponse
      };
      'DOM.querySelectorAll': {
        paramsType: Crdp.DOM.QuerySelectorAllRequest,
        returnType: Crdp.DOM.QuerySelectorAllResponse
      };
      'DOM.redo': {
        paramsType: void,
        returnType: void
      };
      'DOM.removeAttribute': {
        paramsType: Crdp.DOM.RemoveAttributeRequest,
        returnType: void
      };
      'DOM.removeNode': {
        paramsType: Crdp.DOM.RemoveNodeRequest,
        returnType: void
      };
      'DOM.requestChildNodes': {
        paramsType: Crdp.DOM.RequestChildNodesRequest,
        returnType: void
      };
      'DOM.requestNode': {
        paramsType: Crdp.DOM.RequestNodeRequest,
        returnType: Crdp.DOM.RequestNodeResponse
      };
      'DOM.resolveNode': {
        paramsType: void | Crdp.DOM.ResolveNodeRequest,
        returnType: Crdp.DOM.ResolveNodeResponse
      };
      'DOM.setAttributeValue': {
        paramsType: Crdp.DOM.SetAttributeValueRequest,
        returnType: void
      };
      'DOM.setAttributesAsText': {
        paramsType: Crdp.DOM.SetAttributesAsTextRequest,
        returnType: void
      };
      'DOM.setFileInputFiles': {
        paramsType: Crdp.DOM.SetFileInputFilesRequest,
        returnType: void
      };
      'DOM.setInspectedNode': {
        paramsType: Crdp.DOM.SetInspectedNodeRequest,
        returnType: void
      };
      'DOM.setNodeName': {
        paramsType: Crdp.DOM.SetNodeNameRequest,
        returnType: Crdp.DOM.SetNodeNameResponse
      };
      'DOM.setNodeValue': {
        paramsType: Crdp.DOM.SetNodeValueRequest,
        returnType: void
      };
      'DOM.setOuterHTML': {
        paramsType: Crdp.DOM.SetOuterHTMLRequest,
        returnType: void
      };
      'DOM.undo': {
        paramsType: void,
        returnType: void
      };
      'DOMDebugger.getEventListeners': {
        paramsType: Crdp.DOMDebugger.GetEventListenersRequest,
        returnType: Crdp.DOMDebugger.GetEventListenersResponse
      };
      'DOMDebugger.removeDOMBreakpoint': {
        paramsType: Crdp.DOMDebugger.RemoveDOMBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.removeEventListenerBreakpoint': {
        paramsType: Crdp.DOMDebugger.RemoveEventListenerBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.removeInstrumentationBreakpoint': {
        paramsType: Crdp.DOMDebugger.RemoveInstrumentationBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.removeXHRBreakpoint': {
        paramsType: Crdp.DOMDebugger.RemoveXHRBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.setDOMBreakpoint': {
        paramsType: Crdp.DOMDebugger.SetDOMBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.setEventListenerBreakpoint': {
        paramsType: Crdp.DOMDebugger.SetEventListenerBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.setInstrumentationBreakpoint': {
        paramsType: Crdp.DOMDebugger.SetInstrumentationBreakpointRequest,
        returnType: void
      };
      'DOMDebugger.setXHRBreakpoint': {
        paramsType: Crdp.DOMDebugger.SetXHRBreakpointRequest,
        returnType: void
      };
      'DOMSnapshot.getSnapshot': {
        paramsType: Crdp.DOMSnapshot.GetSnapshotRequest,
        returnType: Crdp.DOMSnapshot.GetSnapshotResponse
      };
      'DOMStorage.clear': {
        paramsType: Crdp.DOMStorage.ClearRequest,
        returnType: void
      };
      'DOMStorage.disable': {
        paramsType: void,
        returnType: void
      };
      'DOMStorage.enable': {
        paramsType: void,
        returnType: void
      };
      'DOMStorage.getDOMStorageItems': {
        paramsType: Crdp.DOMStorage.GetDOMStorageItemsRequest,
        returnType: Crdp.DOMStorage.GetDOMStorageItemsResponse
      };
      'DOMStorage.removeDOMStorageItem': {
        paramsType: Crdp.DOMStorage.RemoveDOMStorageItemRequest,
        returnType: void
      };
      'DOMStorage.setDOMStorageItem': {
        paramsType: Crdp.DOMStorage.SetDOMStorageItemRequest,
        returnType: void
      };
      'Database.disable': {
        paramsType: void,
        returnType: void
      };
      'Database.enable': {
        paramsType: void,
        returnType: void
      };
      'Database.executeSQL': {
        paramsType: Crdp.Database.ExecuteSQLRequest,
        returnType: Crdp.Database.ExecuteSQLResponse
      };
      'Database.getDatabaseTableNames': {
        paramsType: Crdp.Database.GetDatabaseTableNamesRequest,
        returnType: Crdp.Database.GetDatabaseTableNamesResponse
      };
      'DeviceOrientation.clearDeviceOrientationOverride': {
        paramsType: void,
        returnType: void
      };
      'DeviceOrientation.setDeviceOrientationOverride': {
        paramsType: Crdp.DeviceOrientation.SetDeviceOrientationOverrideRequest,
        returnType: void
      };
      'Emulation.canEmulate': {
        paramsType: void,
        returnType: Crdp.Emulation.CanEmulateResponse
      };
      'Emulation.clearDeviceMetricsOverride': {
        paramsType: void,
        returnType: void
      };
      'Emulation.clearGeolocationOverride': {
        paramsType: void,
        returnType: void
      };
      'Emulation.resetPageScaleFactor': {
        paramsType: void,
        returnType: void
      };
      'Emulation.setCPUThrottlingRate': {
        paramsType: Crdp.Emulation.SetCPUThrottlingRateRequest,
        returnType: void
      };
      'Emulation.setDefaultBackgroundColorOverride': {
        paramsType: void | Crdp.Emulation.SetDefaultBackgroundColorOverrideRequest,
        returnType: void
      };
      'Emulation.setDeviceMetricsOverride': {
        paramsType: Crdp.Emulation.SetDeviceMetricsOverrideRequest,
        returnType: void
      };
      'Emulation.setEmitTouchEventsForMouse': {
        paramsType: Crdp.Emulation.SetEmitTouchEventsForMouseRequest,
        returnType: void
      };
      'Emulation.setEmulatedMedia': {
        paramsType: Crdp.Emulation.SetEmulatedMediaRequest,
        returnType: void
      };
      'Emulation.setGeolocationOverride': {
        paramsType: void | Crdp.Emulation.SetGeolocationOverrideRequest,
        returnType: void
      };
      'Emulation.setNavigatorOverrides': {
        paramsType: Crdp.Emulation.SetNavigatorOverridesRequest,
        returnType: void
      };
      'Emulation.setPageScaleFactor': {
        paramsType: Crdp.Emulation.SetPageScaleFactorRequest,
        returnType: void
      };
      'Emulation.setScriptExecutionDisabled': {
        paramsType: Crdp.Emulation.SetScriptExecutionDisabledRequest,
        returnType: void
      };
      'Emulation.setTouchEmulationEnabled': {
        paramsType: Crdp.Emulation.SetTouchEmulationEnabledRequest,
        returnType: void
      };
      'Emulation.setVirtualTimePolicy': {
        paramsType: Crdp.Emulation.SetVirtualTimePolicyRequest,
        returnType: Crdp.Emulation.SetVirtualTimePolicyResponse
      };
      'Emulation.setVisibleSize': {
        paramsType: Crdp.Emulation.SetVisibleSizeRequest,
        returnType: void
      };
      'HeadlessExperimental.beginFrame': {
        paramsType: void | Crdp.HeadlessExperimental.BeginFrameRequest,
        returnType: Crdp.HeadlessExperimental.BeginFrameResponse
      };
      'HeadlessExperimental.disable': {
        paramsType: void,
        returnType: void
      };
      'HeadlessExperimental.enable': {
        paramsType: void,
        returnType: void
      };
      'IO.close': {
        paramsType: Crdp.IO.CloseRequest,
        returnType: void
      };
      'IO.read': {
        paramsType: Crdp.IO.ReadRequest,
        returnType: Crdp.IO.ReadResponse
      };
      'IO.resolveBlob': {
        paramsType: Crdp.IO.ResolveBlobRequest,
        returnType: Crdp.IO.ResolveBlobResponse
      };
      'IndexedDB.clearObjectStore': {
        paramsType: Crdp.IndexedDB.ClearObjectStoreRequest,
        returnType: void
      };
      'IndexedDB.deleteDatabase': {
        paramsType: Crdp.IndexedDB.DeleteDatabaseRequest,
        returnType: void
      };
      'IndexedDB.deleteObjectStoreEntries': {
        paramsType: Crdp.IndexedDB.DeleteObjectStoreEntriesRequest,
        returnType: void
      };
      'IndexedDB.disable': {
        paramsType: void,
        returnType: void
      };
      'IndexedDB.enable': {
        paramsType: void,
        returnType: void
      };
      'IndexedDB.requestData': {
        paramsType: Crdp.IndexedDB.RequestDataRequest,
        returnType: Crdp.IndexedDB.RequestDataResponse
      };
      'IndexedDB.requestDatabase': {
        paramsType: Crdp.IndexedDB.RequestDatabaseRequest,
        returnType: Crdp.IndexedDB.RequestDatabaseResponse
      };
      'IndexedDB.requestDatabaseNames': {
        paramsType: Crdp.IndexedDB.RequestDatabaseNamesRequest,
        returnType: Crdp.IndexedDB.RequestDatabaseNamesResponse
      };
      'Input.dispatchKeyEvent': {
        paramsType: Crdp.Input.DispatchKeyEventRequest,
        returnType: void
      };
      'Input.dispatchMouseEvent': {
        paramsType: Crdp.Input.DispatchMouseEventRequest,
        returnType: void
      };
      'Input.dispatchTouchEvent': {
        paramsType: Crdp.Input.DispatchTouchEventRequest,
        returnType: void
      };
      'Input.emulateTouchFromMouseEvent': {
        paramsType: Crdp.Input.EmulateTouchFromMouseEventRequest,
        returnType: void
      };
      'Input.setIgnoreInputEvents': {
        paramsType: Crdp.Input.SetIgnoreInputEventsRequest,
        returnType: void
      };
      'Input.synthesizePinchGesture': {
        paramsType: Crdp.Input.SynthesizePinchGestureRequest,
        returnType: void
      };
      'Input.synthesizeScrollGesture': {
        paramsType: Crdp.Input.SynthesizeScrollGestureRequest,
        returnType: void
      };
      'Input.synthesizeTapGesture': {
        paramsType: Crdp.Input.SynthesizeTapGestureRequest,
        returnType: void
      };
      'Inspector.disable': {
        paramsType: void,
        returnType: void
      };
      'Inspector.enable': {
        paramsType: void,
        returnType: void
      };
      'LayerTree.compositingReasons': {
        paramsType: Crdp.LayerTree.CompositingReasonsRequest,
        returnType: Crdp.LayerTree.CompositingReasonsResponse
      };
      'LayerTree.disable': {
        paramsType: void,
        returnType: void
      };
      'LayerTree.enable': {
        paramsType: void,
        returnType: void
      };
      'LayerTree.loadSnapshot': {
        paramsType: Crdp.LayerTree.LoadSnapshotRequest,
        returnType: Crdp.LayerTree.LoadSnapshotResponse
      };
      'LayerTree.makeSnapshot': {
        paramsType: Crdp.LayerTree.MakeSnapshotRequest,
        returnType: Crdp.LayerTree.MakeSnapshotResponse
      };
      'LayerTree.profileSnapshot': {
        paramsType: Crdp.LayerTree.ProfileSnapshotRequest,
        returnType: Crdp.LayerTree.ProfileSnapshotResponse
      };
      'LayerTree.releaseSnapshot': {
        paramsType: Crdp.LayerTree.ReleaseSnapshotRequest,
        returnType: void
      };
      'LayerTree.replaySnapshot': {
        paramsType: Crdp.LayerTree.ReplaySnapshotRequest,
        returnType: Crdp.LayerTree.ReplaySnapshotResponse
      };
      'LayerTree.snapshotCommandLog': {
        paramsType: Crdp.LayerTree.SnapshotCommandLogRequest,
        returnType: Crdp.LayerTree.SnapshotCommandLogResponse
      };
      'Log.clear': {
        paramsType: void,
        returnType: void
      };
      'Log.disable': {
        paramsType: void,
        returnType: void
      };
      'Log.enable': {
        paramsType: void,
        returnType: void
      };
      'Log.startViolationsReport': {
        paramsType: Crdp.Log.StartViolationsReportRequest,
        returnType: void
      };
      'Log.stopViolationsReport': {
        paramsType: void,
        returnType: void
      };
      'Memory.getDOMCounters': {
        paramsType: void,
        returnType: Crdp.Memory.GetDOMCountersResponse
      };
      'Memory.prepareForLeakDetection': {
        paramsType: void,
        returnType: void
      };
      'Memory.setPressureNotificationsSuppressed': {
        paramsType: Crdp.Memory.SetPressureNotificationsSuppressedRequest,
        returnType: void
      };
      'Memory.simulatePressureNotification': {
        paramsType: Crdp.Memory.SimulatePressureNotificationRequest,
        returnType: void
      };
      'Network.canClearBrowserCache': {
        paramsType: void,
        returnType: Crdp.Network.CanClearBrowserCacheResponse
      };
      'Network.canClearBrowserCookies': {
        paramsType: void,
        returnType: Crdp.Network.CanClearBrowserCookiesResponse
      };
      'Network.canEmulateNetworkConditions': {
        paramsType: void,
        returnType: Crdp.Network.CanEmulateNetworkConditionsResponse
      };
      'Network.clearBrowserCache': {
        paramsType: void,
        returnType: void
      };
      'Network.clearBrowserCookies': {
        paramsType: void,
        returnType: void
      };
      'Network.continueInterceptedRequest': {
        paramsType: Crdp.Network.ContinueInterceptedRequestRequest,
        returnType: void
      };
      'Network.deleteCookies': {
        paramsType: Crdp.Network.DeleteCookiesRequest,
        returnType: void
      };
      'Network.disable': {
        paramsType: void,
        returnType: void
      };
      'Network.emulateNetworkConditions': {
        paramsType: Crdp.Network.EmulateNetworkConditionsRequest,
        returnType: void
      };
      'Network.enable': {
        paramsType: void | Crdp.Network.EnableRequest,
        returnType: void
      };
      'Network.getAllCookies': {
        paramsType: void,
        returnType: Crdp.Network.GetAllCookiesResponse
      };
      'Network.getCertificate': {
        paramsType: Crdp.Network.GetCertificateRequest,
        returnType: Crdp.Network.GetCertificateResponse
      };
      'Network.getCookies': {
        paramsType: void | Crdp.Network.GetCookiesRequest,
        returnType: Crdp.Network.GetCookiesResponse
      };
      'Network.getResponseBody': {
        paramsType: Crdp.Network.GetResponseBodyRequest,
        returnType: Crdp.Network.GetResponseBodyResponse
      };
      'Network.getRequestPostData': {
        paramsType: Crdp.Network.GetRequestPostDataRequest,
        returnType: Crdp.Network.GetRequestPostDataResponse
      };
      'Network.getResponseBodyForInterception': {
        paramsType: Crdp.Network.GetResponseBodyForInterceptionRequest,
        returnType: Crdp.Network.GetResponseBodyForInterceptionResponse
      };
      'Network.replayXHR': {
        paramsType: Crdp.Network.ReplayXHRRequest,
        returnType: void
      };
      'Network.searchInResponseBody': {
        paramsType: Crdp.Network.SearchInResponseBodyRequest,
        returnType: Crdp.Network.SearchInResponseBodyResponse
      };
      'Network.setBlockedURLs': {
        paramsType: Crdp.Network.SetBlockedURLsRequest,
        returnType: void
      };
      'Network.setBypassServiceWorker': {
        paramsType: Crdp.Network.SetBypassServiceWorkerRequest,
        returnType: void
      };
      'Network.setCacheDisabled': {
        paramsType: Crdp.Network.SetCacheDisabledRequest,
        returnType: void
      };
      'Network.setCookie': {
        paramsType: Crdp.Network.SetCookieRequest,
        returnType: Crdp.Network.SetCookieResponse
      };
      'Network.setCookies': {
        paramsType: Crdp.Network.SetCookiesRequest,
        returnType: void
      };
      'Network.setDataSizeLimitsForTest': {
        paramsType: Crdp.Network.SetDataSizeLimitsForTestRequest,
        returnType: void
      };
      'Network.setExtraHTTPHeaders': {
        paramsType: Crdp.Network.SetExtraHTTPHeadersRequest,
        returnType: void
      };
      'Network.setRequestInterception': {
        paramsType: Crdp.Network.SetRequestInterceptionRequest,
        returnType: void
      };
      'Network.setUserAgentOverride': {
        paramsType: Crdp.Network.SetUserAgentOverrideRequest,
        returnType: void
      };
      'Overlay.disable': {
        paramsType: void,
        returnType: void
      };
      'Overlay.enable': {
        paramsType: void,
        returnType: void
      };
      'Overlay.getHighlightObjectForTest': {
        paramsType: Crdp.Overlay.GetHighlightObjectForTestRequest,
        returnType: Crdp.Overlay.GetHighlightObjectForTestResponse
      };
      'Overlay.hideHighlight': {
        paramsType: void,
        returnType: void
      };
      'Overlay.highlightFrame': {
        paramsType: Crdp.Overlay.HighlightFrameRequest,
        returnType: void
      };
      'Overlay.highlightNode': {
        paramsType: Crdp.Overlay.HighlightNodeRequest,
        returnType: void
      };
      'Overlay.highlightQuad': {
        paramsType: Crdp.Overlay.HighlightQuadRequest,
        returnType: void
      };
      'Overlay.highlightRect': {
        paramsType: Crdp.Overlay.HighlightRectRequest,
        returnType: void
      };
      'Overlay.setInspectMode': {
        paramsType: Crdp.Overlay.SetInspectModeRequest,
        returnType: void
      };
      'Overlay.setPausedInDebuggerMessage': {
        paramsType: void | Crdp.Overlay.SetPausedInDebuggerMessageRequest,
        returnType: void
      };
      'Overlay.setShowDebugBorders': {
        paramsType: Crdp.Overlay.SetShowDebugBordersRequest,
        returnType: void
      };
      'Overlay.setShowFPSCounter': {
        paramsType: Crdp.Overlay.SetShowFPSCounterRequest,
        returnType: void
      };
      'Overlay.setShowPaintRects': {
        paramsType: Crdp.Overlay.SetShowPaintRectsRequest,
        returnType: void
      };
      'Overlay.setShowScrollBottleneckRects': {
        paramsType: Crdp.Overlay.SetShowScrollBottleneckRectsRequest,
        returnType: void
      };
      'Overlay.setShowViewportSizeOnResize': {
        paramsType: Crdp.Overlay.SetShowViewportSizeOnResizeRequest,
        returnType: void
      };
      'Overlay.setSuspended': {
        paramsType: Crdp.Overlay.SetSuspendedRequest,
        returnType: void
      };
      'Page.addScriptToEvaluateOnLoad': {
        paramsType: Crdp.Page.AddScriptToEvaluateOnLoadRequest,
        returnType: Crdp.Page.AddScriptToEvaluateOnLoadResponse
      };
      'Page.addScriptToEvaluateOnNewDocument': {
        paramsType: Crdp.Page.AddScriptToEvaluateOnNewDocumentRequest,
        returnType: Crdp.Page.AddScriptToEvaluateOnNewDocumentResponse
      };
      'Page.bringToFront': {
        paramsType: void,
        returnType: void
      };
      'Page.captureScreenshot': {
        paramsType: void | Crdp.Page.CaptureScreenshotRequest,
        returnType: Crdp.Page.CaptureScreenshotResponse
      };
      'Page.clearDeviceMetricsOverride': {
        paramsType: void,
        returnType: void
      };
      'Page.clearDeviceOrientationOverride': {
        paramsType: void,
        returnType: void
      };
      'Page.clearGeolocationOverride': {
        paramsType: void,
        returnType: void
      };
      'Page.createIsolatedWorld': {
        paramsType: Crdp.Page.CreateIsolatedWorldRequest,
        returnType: Crdp.Page.CreateIsolatedWorldResponse
      };
      'Page.deleteCookie': {
        paramsType: Crdp.Page.DeleteCookieRequest,
        returnType: void
      };
      'Page.disable': {
        paramsType: void,
        returnType: void
      };
      'Page.enable': {
        paramsType: void,
        returnType: void
      };
      'Page.getAppManifest': {
        paramsType: void,
        returnType: Crdp.Page.GetAppManifestResponse
      };
      'Page.getCookies': {
        paramsType: void,
        returnType: Crdp.Page.GetCookiesResponse
      };
      'Page.getFrameTree': {
        paramsType: void,
        returnType: Crdp.Page.GetFrameTreeResponse
      };
      'Page.getLayoutMetrics': {
        paramsType: void,
        returnType: Crdp.Page.GetLayoutMetricsResponse
      };
      'Page.getNavigationHistory': {
        paramsType: void,
        returnType: Crdp.Page.GetNavigationHistoryResponse
      };
      'Page.getResourceContent': {
        paramsType: Crdp.Page.GetResourceContentRequest,
        returnType: Crdp.Page.GetResourceContentResponse
      };
      'Page.getResourceTree': {
        paramsType: void,
        returnType: Crdp.Page.GetResourceTreeResponse
      };
      'Page.handleJavaScriptDialog': {
        paramsType: Crdp.Page.HandleJavaScriptDialogRequest,
        returnType: void
      };
      'Page.navigate': {
        paramsType: Crdp.Page.NavigateRequest,
        returnType: Crdp.Page.NavigateResponse
      };
      'Page.navigateToHistoryEntry': {
        paramsType: Crdp.Page.NavigateToHistoryEntryRequest,
        returnType: void
      };
      'Page.printToPDF': {
        paramsType: void | Crdp.Page.PrintToPDFRequest,
        returnType: Crdp.Page.PrintToPDFResponse
      };
      'Page.reload': {
        paramsType: void | Crdp.Page.ReloadRequest,
        returnType: void
      };
      'Page.removeScriptToEvaluateOnLoad': {
        paramsType: Crdp.Page.RemoveScriptToEvaluateOnLoadRequest,
        returnType: void
      };
      'Page.removeScriptToEvaluateOnNewDocument': {
        paramsType: Crdp.Page.RemoveScriptToEvaluateOnNewDocumentRequest,
        returnType: void
      };
      'Page.requestAppBanner': {
        paramsType: void,
        returnType: void
      };
      'Page.screencastFrameAck': {
        paramsType: Crdp.Page.ScreencastFrameAckRequest,
        returnType: void
      };
      'Page.searchInResource': {
        paramsType: Crdp.Page.SearchInResourceRequest,
        returnType: Crdp.Page.SearchInResourceResponse
      };
      'Page.setAdBlockingEnabled': {
        paramsType: Crdp.Page.SetAdBlockingEnabledRequest,
        returnType: void
      };
      'Page.setDeviceMetricsOverride': {
        paramsType: Crdp.Page.SetDeviceMetricsOverrideRequest,
        returnType: void
      };
      'Page.setDeviceOrientationOverride': {
        paramsType: Crdp.Page.SetDeviceOrientationOverrideRequest,
        returnType: void
      };
      'Page.setDocumentContent': {
        paramsType: Crdp.Page.SetDocumentContentRequest,
        returnType: void
      };
      'Page.setDownloadBehavior': {
        paramsType: Crdp.Page.SetDownloadBehaviorRequest,
        returnType: void
      };
      'Page.setGeolocationOverride': {
        paramsType: void | Crdp.Page.SetGeolocationOverrideRequest,
        returnType: void
      };
      'Page.setLifecycleEventsEnabled': {
        paramsType: Crdp.Page.SetLifecycleEventsEnabledRequest,
        returnType: void
      };
      'Page.setTouchEmulationEnabled': {
        paramsType: Crdp.Page.SetTouchEmulationEnabledRequest,
        returnType: void
      };
      'Page.startScreencast': {
        paramsType: void | Crdp.Page.StartScreencastRequest,
        returnType: void
      };
      'Page.stopLoading': {
        paramsType: void,
        returnType: void
      };
      'Page.crash': {
        paramsType: void,
        returnType: void
      };
      'Page.stopScreencast': {
        paramsType: void,
        returnType: void
      };
      'Performance.disable': {
        paramsType: void,
        returnType: void
      };
      'Performance.enable': {
        paramsType: void,
        returnType: void
      };
      'Performance.getMetrics': {
        paramsType: void,
        returnType: Crdp.Performance.GetMetricsResponse
      };
      'Security.disable': {
        paramsType: void,
        returnType: void
      };
      'Security.enable': {
        paramsType: void,
        returnType: void
      };
      'Security.setIgnoreCertificateErrors': {
        paramsType: Crdp.Security.SetIgnoreCertificateErrorsRequest,
        returnType: void
      };
      'Security.handleCertificateError': {
        paramsType: Crdp.Security.HandleCertificateErrorRequest,
        returnType: void
      };
      'Security.setOverrideCertificateErrors': {
        paramsType: Crdp.Security.SetOverrideCertificateErrorsRequest,
        returnType: void
      };
      'ServiceWorker.deliverPushMessage': {
        paramsType: Crdp.ServiceWorker.DeliverPushMessageRequest,
        returnType: void
      };
      'ServiceWorker.disable': {
        paramsType: void,
        returnType: void
      };
      'ServiceWorker.dispatchSyncEvent': {
        paramsType: Crdp.ServiceWorker.DispatchSyncEventRequest,
        returnType: void
      };
      'ServiceWorker.enable': {
        paramsType: void,
        returnType: void
      };
      'ServiceWorker.inspectWorker': {
        paramsType: Crdp.ServiceWorker.InspectWorkerRequest,
        returnType: void
      };
      'ServiceWorker.setForceUpdateOnPageLoad': {
        paramsType: Crdp.ServiceWorker.SetForceUpdateOnPageLoadRequest,
        returnType: void
      };
      'ServiceWorker.skipWaiting': {
        paramsType: Crdp.ServiceWorker.SkipWaitingRequest,
        returnType: void
      };
      'ServiceWorker.startWorker': {
        paramsType: Crdp.ServiceWorker.StartWorkerRequest,
        returnType: void
      };
      'ServiceWorker.stopAllWorkers': {
        paramsType: void,
        returnType: void
      };
      'ServiceWorker.stopWorker': {
        paramsType: Crdp.ServiceWorker.StopWorkerRequest,
        returnType: void
      };
      'ServiceWorker.unregister': {
        paramsType: Crdp.ServiceWorker.UnregisterRequest,
        returnType: void
      };
      'ServiceWorker.updateRegistration': {
        paramsType: Crdp.ServiceWorker.UpdateRegistrationRequest,
        returnType: void
      };
      'Storage.clearDataForOrigin': {
        paramsType: Crdp.Storage.ClearDataForOriginRequest,
        returnType: void
      };
      'Storage.getUsageAndQuota': {
        paramsType: Crdp.Storage.GetUsageAndQuotaRequest,
        returnType: Crdp.Storage.GetUsageAndQuotaResponse
      };
      'Storage.trackCacheStorageForOrigin': {
        paramsType: Crdp.Storage.TrackCacheStorageForOriginRequest,
        returnType: void
      };
      'Storage.trackIndexedDBForOrigin': {
        paramsType: Crdp.Storage.TrackIndexedDBForOriginRequest,
        returnType: void
      };
      'Storage.untrackCacheStorageForOrigin': {
        paramsType: Crdp.Storage.UntrackCacheStorageForOriginRequest,
        returnType: void
      };
      'Storage.untrackIndexedDBForOrigin': {
        paramsType: Crdp.Storage.UntrackIndexedDBForOriginRequest,
        returnType: void
      };
      'SystemInfo.getInfo': {
        paramsType: void,
        returnType: Crdp.SystemInfo.GetInfoResponse
      };
      'Target.activateTarget': {
        paramsType: Crdp.Target.ActivateTargetRequest,
        returnType: void
      };
      'Target.attachToTarget': {
        paramsType: Crdp.Target.AttachToTargetRequest,
        returnType: Crdp.Target.AttachToTargetResponse
      };
      'Target.closeTarget': {
        paramsType: Crdp.Target.CloseTargetRequest,
        returnType: Crdp.Target.CloseTargetResponse
      };
      'Target.createBrowserContext': {
        paramsType: void,
        returnType: Crdp.Target.CreateBrowserContextResponse
      };
      'Target.createTarget': {
        paramsType: Crdp.Target.CreateTargetRequest,
        returnType: Crdp.Target.CreateTargetResponse
      };
      'Target.detachFromTarget': {
        paramsType: void | Crdp.Target.DetachFromTargetRequest,
        returnType: void
      };
      'Target.disposeBrowserContext': {
        paramsType: Crdp.Target.DisposeBrowserContextRequest,
        returnType: Crdp.Target.DisposeBrowserContextResponse
      };
      'Target.getTargetInfo': {
        paramsType: Crdp.Target.GetTargetInfoRequest,
        returnType: Crdp.Target.GetTargetInfoResponse
      };
      'Target.getTargets': {
        paramsType: void,
        returnType: Crdp.Target.GetTargetsResponse
      };
      'Target.sendMessageToTarget': {
        paramsType: Crdp.Target.SendMessageToTargetRequest,
        returnType: void
      };
      'Target.setAttachToFrames': {
        paramsType: Crdp.Target.SetAttachToFramesRequest,
        returnType: void
      };
      'Target.setAutoAttach': {
        paramsType: Crdp.Target.SetAutoAttachRequest,
        returnType: void
      };
      'Target.setDiscoverTargets': {
        paramsType: Crdp.Target.SetDiscoverTargetsRequest,
        returnType: void
      };
      'Target.setRemoteLocations': {
        paramsType: Crdp.Target.SetRemoteLocationsRequest,
        returnType: void
      };
      'Tethering.bind': {
        paramsType: Crdp.Tethering.BindRequest,
        returnType: void
      };
      'Tethering.unbind': {
        paramsType: Crdp.Tethering.UnbindRequest,
        returnType: void
      };
      'Tracing.end': {
        paramsType: void,
        returnType: void
      };
      'Tracing.getCategories': {
        paramsType: void,
        returnType: Crdp.Tracing.GetCategoriesResponse
      };
      'Tracing.recordClockSyncMarker': {
        paramsType: Crdp.Tracing.RecordClockSyncMarkerRequest,
        returnType: void
      };
      'Tracing.requestMemoryDump': {
        paramsType: void,
        returnType: Crdp.Tracing.RequestMemoryDumpResponse
      };
      'Tracing.start': {
        paramsType: void | Crdp.Tracing.StartRequest,
        returnType: void
      };
    }
  }
}

// empty export to keep file a module
export {}
